---
  - name: Install multiple dependencies
    yum:
      name:
      - ksh
      - gcc
      - gdb
      - lsof
      - strace
      - tmux
      - perf
      - pcp-system-tools
      - bcc-tools
      disable_gpg_check: true
      state: latest
  - name: Create directories for all instances in answerfile
    ansible.builtin.file:
      path: "{{ item.Directory }}"
      mode: "2755"
      owner: "{{ epic_admin_user }}"
      group: "{{ epic_admin_group }}"
      state: directory
    loop: "{{ answer_file.Instances }}"
  - name: Create instaserver release directory
    ansible.builtin.file:
      path: "{{ instaserver_extract_dir }}"
      state: directory
  - name: Download files
    get_url:
      url: "{{ item.value }}"
      dest: "{{ instaserver_extract_dir }}"
      #mode: '0555'
    register: files
    loop: "{{ downloads | dict2items }}"
  - name: Get name of instaserver file
    set_fact:
      instaserver_file: "{{ downloads.instaserver_url.split('/')[-1] }}"
  - name: Get name of instaserver directory
    set_fact:
      instaserver_dir: "{{ instaserver_file.split('.')[0] }}"
  #- name: Get list of downloads
  #  debug:
  #    msg: "{{ files.results }}"
  - name: Find instaserver download from array of downloads
    include_tasks: post_download.yml
    when: item.item.key == "instaserver_url"
    loop: "{{ files.results }}"
  - name: Change file ownership for all downloaded files except instaserver
    ansible.builtin.file:
      path: "{{ item.invocation.module_args.path }}"
      owner: "{{ epic_admin_user }}"
      group: "{{ epic_admin_group }}"
    when: item.item.key != "instaserver_url"
    loop: "{{ files.results }}"
  - name: Template to build answer_file
    ansible.builtin.template:
      src: answer_file.j2
      dest: "{{ instaserver_extract_dir }}{{ answerfile_name }}"
      owner: "{{ epic_admin_user }}"
      group: "{{ epic_admin_group }}"
      mode: '0644'
  - name: Get name of Epic config RPM
    find:
      paths: "{{ instaserver_extract_dir }}{{ instaserver_dir }}/other/linuxconfig"
      patterns: 'epic-config*.rpm'
    register: rpms
  - name: Install epic-config rpm
    yum:
      name: "{{ item.path }}"
      state: present
      disable_gpg_check: yes
    loop: "{{ rpms.files }}"
  - stat:
      path: "{{ iris_bin }}"
    register: irisbin
  - name: Install Iris ()
    command: sh {{ instaserver_file }} --component BuildCustom --variable_file {{ instaserver_extract_dir }}{{ answerfile_name }}
    args:
      chdir: "{{ instaserver_extract_dir }}"
    when: irisbin.stat.exists != True
    register: irisinstall
  - stat: path="/epic/bin/start_epic_all.ksh"
    register: start_script
  - name: Move epic start script into bin directory
    command: "cp {{ instaserver_extract_dir }}{{instaserver_dir}}/other/ha-scripts/start_epic_all.ksh /epic/bin/"
    when: start_script.stat.exists != True
  - stat: path="/epic/bin/stop_epic_all.ksh"
    register: stop_script
  - name: Move epic start script into bin directory
    command: "cp {{ instaserver_extract_dir }}{{instaserver_dir}}/other/ha-scripts/stop_epic_all.ksh /epic/bin/"
    when: stop_script.stat.exists != True
  - name: Return stdout from iris install
    debug:
      msg: "{{ irisinstall.stdout }}"
    when: irisinstall.changed
  - name: Fix permissions
    command: "{{ item.Directory }}/bin/checkperm --yes_fix"
    register: checkperm
    when: irisinstall.changed
    loop: "{{ answer_file.Instances }}"
  - name: Return stdout from checkperm
    debug:
      msg: "{{ checkperm.stdout }}"
    when: irisinstall.changed
  - name: Start epic service
    service:
      name: epic
      state: started
      enabled: yes